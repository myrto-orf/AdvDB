Executing query with broadcast join strategy
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#360L DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(count#360L DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=132]
      +- HashAggregate(keys=[Vict Descent#262], functions=[count(1)])
         +- Exchange hashpartitioning(Vict Descent#262, 200), ENSURE_REQUIREMENTS, [plan_id=129]
            +- HashAggregate(keys=[Vict Descent#262], functions=[partial_count(1)])
               +- Project [Vict Descent#262]
                  +- BroadcastHashJoin [knownfloatingpointnormalized(normalizenanandzero(LAT#26)), knownfloatingpointnormalized(normalizenanandzero(LON#27))], [knownfloatingpointnormalized(normalizenanandzero(LAT#118)), knownfloatingpointnormalized(normalizenanandzero(LON#119))], Inner, BuildRight, false
                     :- Project [pythonUDF0#365 AS Vict Descent#262, LAT#26, LON#27]
                     :  +- BatchEvalPython [map_descent(Vict Descent#13)#261], [pythonUDF0#365]
                     :     +- HashAggregate(keys=[Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 4 more fields], functions=[])
                     :        +- Exchange hashpartitioning(Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 5 more fields), ENSURE_REQUIREMENTS, [plan_id=115]
                     :           +- HashAggregate(keys=[Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, knownfloatingpointnormalized(normalizenanandzero(LON#27)) AS LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 4 more fields], functions=[])
                     :              +- Union
                     :                 :- Filter ((((year(cast(gettimestamp(DATE OCC#2, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#13)) AND isnotnull(LAT#26)) AND isnotnull(LON#27))
                     :                 :  +- FileScan csv [DR_NO#0,Date Rptd#1,DATE OCC#2,TIME OCC#3,AREA#4,AREA NAME#5,Rpt Dist No#6,Part 1-2#7,Crm Cd#8,Crm Cd Desc#9,Mocodes#10,Vict Age#11,Vict Sex#12,Vict Descent#13,Premis Cd#14,Premis Desc#15,Weapon Used Cd#16,Weapon Desc#17,Status#18,Status Desc#19,Crm Cd 1#20,Crm Cd 2#21,Crm Cd 3#22,Crm Cd 4#23,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#2, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), f..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/crime_data..., PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:string,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA:int,AREA NAME:string,Rpt D...
                     :                 +- Filter ((((year(cast(gettimestamp(DATE OCC#58, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#69)) AND isnotnull(LAT#82)) AND isnotnull(LON#83))
                     :                    +- FileScan csv [DR_NO#56,Date Rptd#57,DATE OCC#58,TIME OCC#59,AREA#60,AREA NAME#61,Rpt Dist No#62,Part 1-2#63,Crm Cd#64,Crm Cd Desc#65,Mocodes#66,Vict Age#67,Vict Sex#68,Vict Descent#69,Premis Cd#70,Premis Desc#71,Weapon Used Cd#72,Weapon Desc#73,Status#74,Status Desc#75,Crm Cd 1#76,Crm Cd 2#77,Crm Cd 3#78,Crm Cd 4#79,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#58, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/crime_data..., PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:string,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA:int,AREA NAME:string,Rpt D...
                     +- BroadcastExchange HashedRelationBroadcastMode(List(knownfloatingpointnormalized(normalizenanandzero(input[0, double, true])), knownfloatingpointnormalized(normalizenanandzero(input[1, double, true]))),false), [plan_id=124]
                        +- Project [LAT#118, LON#119]
                           +- Filter (ZIPcode#364 IN (90272,90077,91210) OR ZIPcode#364 IN (90021,91046,90058))
                              +- HashAggregate(keys=[LAT#118, LON#119], functions=[first(ZIPcode#120, false)])
                                 +- Exchange hashpartitioning(LAT#118, LON#119, 200), ENSURE_REQUIREMENTS, [plan_id=119]
                                    +- HashAggregate(keys=[knownfloatingpointnormalized(normalizenanandzero(LAT#118)) AS LAT#118, knownfloatingpointnormalized(normalizenanandzero(LON#119)) AS LON#119], functions=[partial_first(ZIPcode#120, false)])
                                       +- Filter (isnotnull(LAT#118) AND isnotnull(LON#119))
                                          +- FileScan csv [LAT#118,LON#119,ZIPcode#120] Batched: false, DataFilters: [isnotnull(LAT#118), isnotnull(LON#119)], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/revgecodin..., PartitionFilters: [], PushedFilters: [IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<LAT:double,LON:double,ZIPcode:int>


+--------------------+-----+
|        Vict Descent|count|
+--------------------+-----+
|Hispanic/Latin/Me...| 1053|
|               White|  610|
|               Black|  349|
|               Other|  272|
|             Unknown|   71|
|         Other Asian|   46|
|              Korean|    4|
|             Chinese|    1|
|American Indian/A...|    1|
+--------------------+-----+

Executing query with merge join strategy
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#522L DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(count#522L DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=666]
      +- HashAggregate(keys=[Vict Descent#262], functions=[count(1)])
         +- Exchange hashpartitioning(Vict Descent#262, 200), ENSURE_REQUIREMENTS, [plan_id=663]
            +- HashAggregate(keys=[Vict Descent#262], functions=[partial_count(1)])
               +- Project [Vict Descent#262]
                  +- SortMergeJoin [knownfloatingpointnormalized(normalizenanandzero(LAT#26)), knownfloatingpointnormalized(normalizenanandzero(LON#27))], [knownfloatingpointnormalized(normalizenanandzero(LAT#118)), knownfloatingpointnormalized(normalizenanandzero(LON#119))], Inner
                     :- Sort [knownfloatingpointnormalized(normalizenanandzero(LAT#26)) ASC NULLS FIRST, knownfloatingpointnormalized(normalizenanandzero(LON#27)) ASC NULLS FIRST], false, 0
                     :  +- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#26)), knownfloatingpointnormalized(normalizenanandzero(LON#27)), 200), ENSURE_REQUIREMENTS, [plan_id=655]
                     :     +- Project [pythonUDF0#527 AS Vict Descent#262, LAT#26, LON#27]
                     :        +- BatchEvalPython [map_descent(Vict Descent#13)#261], [pythonUDF0#527]
                     :           +- HashAggregate(keys=[Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 4 more fields], functions=[])
                     :              +- Exchange hashpartitioning(Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 5 more fields), ENSURE_REQUIREMENTS, [plan_id=645]
                     :                 +- HashAggregate(keys=[Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, knownfloatingpointnormalized(normalizenanandzero(LON#27)) AS LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 4 more fields], functions=[])
                     :                    +- Union
                     :                       :- Filter ((((year(cast(gettimestamp(DATE OCC#2, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#13)) AND isnotnull(LAT#26)) AND isnotnull(LON#27))
                     :                       :  +- FileScan csv [DR_NO#0,Date Rptd#1,DATE OCC#2,TIME OCC#3,AREA#4,AREA NAME#5,Rpt Dist No#6,Part 1-2#7,Crm Cd#8,Crm Cd Desc#9,Mocodes#10,Vict Age#11,Vict Sex#12,Vict Descent#13,Premis Cd#14,Premis Desc#15,Weapon Used Cd#16,Weapon Desc#17,Status#18,Status Desc#19,Crm Cd 1#20,Crm Cd 2#21,Crm Cd 3#22,Crm Cd 4#23,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#2, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), f..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/crime_data..., PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:string,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA:int,AREA NAME:string,Rpt D...
                     :                       +- Filter ((((year(cast(gettimestamp(DATE OCC#58, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#69)) AND isnotnull(LAT#82)) AND isnotnull(LON#83))
                     :                          +- FileScan csv [DR_NO#56,Date Rptd#57,DATE OCC#58,TIME OCC#59,AREA#60,AREA NAME#61,Rpt Dist No#62,Part 1-2#63,Crm Cd#64,Crm Cd Desc#65,Mocodes#66,Vict Age#67,Vict Sex#68,Vict Descent#69,Premis Cd#70,Premis Desc#71,Weapon Used Cd#72,Weapon Desc#73,Status#74,Status Desc#75,Crm Cd 1#76,Crm Cd 2#77,Crm Cd 3#78,Crm Cd 4#79,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#58, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/crime_data..., PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:string,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA:int,AREA NAME:string,Rpt D...
                     +- Sort [knownfloatingpointnormalized(normalizenanandzero(LAT#118)) ASC NULLS FIRST, knownfloatingpointnormalized(normalizenanandzero(LON#119)) ASC NULLS FIRST], false, 0
                        +- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#118)), knownfloatingpointnormalized(normalizenanandzero(LON#119)), 200), ENSURE_REQUIREMENTS, [plan_id=656]
                           +- Project [LAT#118, LON#119]
                              +- Filter (ZIPcode#526 IN (90272,90077,91210) OR ZIPcode#526 IN (90021,91046,90058))
                                 +- HashAggregate(keys=[LAT#118, LON#119], functions=[first(ZIPcode#120, false)])
                                    +- Exchange hashpartitioning(LAT#118, LON#119, 200), ENSURE_REQUIREMENTS, [plan_id=649]
                                       +- HashAggregate(keys=[knownfloatingpointnormalized(normalizenanandzero(LAT#118)) AS LAT#118, knownfloatingpointnormalized(normalizenanandzero(LON#119)) AS LON#119], functions=[partial_first(ZIPcode#120, false)])
                                          +- Filter (isnotnull(LAT#118) AND isnotnull(LON#119))
                                             +- FileScan csv [LAT#118,LON#119,ZIPcode#120] Batched: false, DataFilters: [isnotnull(LAT#118), isnotnull(LON#119)], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/revgecodin..., PartitionFilters: [], PushedFilters: [IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<LAT:double,LON:double,ZIPcode:int>


+--------------------+-----+
|        Vict Descent|count|
+--------------------+-----+
|Hispanic/Latin/Me...| 1053|
|               White|  610|
|               Black|  349|
|               Other|  272|
|             Unknown|   71|
|         Other Asian|   46|
|              Korean|    4|
|             Chinese|    1|
|American Indian/A...|    1|
+--------------------+-----+

Executing query with shuffle_hash join strategy
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#684L DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(count#684L DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=1322]
      +- HashAggregate(keys=[Vict Descent#262], functions=[count(1)])
         +- Exchange hashpartitioning(Vict Descent#262, 200), ENSURE_REQUIREMENTS, [plan_id=1319]
            +- HashAggregate(keys=[Vict Descent#262], functions=[partial_count(1)])
               +- Project [Vict Descent#262]
                  +- ShuffledHashJoin [knownfloatingpointnormalized(normalizenanandzero(LAT#26)), knownfloatingpointnormalized(normalizenanandzero(LON#27))], [knownfloatingpointnormalized(normalizenanandzero(LAT#118)), knownfloatingpointnormalized(normalizenanandzero(LON#119))], Inner, BuildRight
                     :- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#26)), knownfloatingpointnormalized(normalizenanandzero(LON#27)), 200), ENSURE_REQUIREMENTS, [plan_id=1313]
                     :  +- Project [pythonUDF0#689 AS Vict Descent#262, LAT#26, LON#27]
                     :     +- BatchEvalPython [map_descent(Vict Descent#13)#261], [pythonUDF0#689]
                     :        +- HashAggregate(keys=[Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 4 more fields], functions=[])
                     :           +- Exchange hashpartitioning(Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 5 more fields), ENSURE_REQUIREMENTS, [plan_id=1303]
                     :              +- HashAggregate(keys=[Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, knownfloatingpointnormalized(normalizenanandzero(LON#27)) AS LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 4 more fields], functions=[])
                     :                 +- Union
                     :                    :- Filter ((((year(cast(gettimestamp(DATE OCC#2, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#13)) AND isnotnull(LAT#26)) AND isnotnull(LON#27))
                     :                    :  +- FileScan csv [DR_NO#0,Date Rptd#1,DATE OCC#2,TIME OCC#3,AREA#4,AREA NAME#5,Rpt Dist No#6,Part 1-2#7,Crm Cd#8,Crm Cd Desc#9,Mocodes#10,Vict Age#11,Vict Sex#12,Vict Descent#13,Premis Cd#14,Premis Desc#15,Weapon Used Cd#16,Weapon Desc#17,Status#18,Status Desc#19,Crm Cd 1#20,Crm Cd 2#21,Crm Cd 3#22,Crm Cd 4#23,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#2, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), f..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/crime_data..., PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:string,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA:int,AREA NAME:string,Rpt D...
                     :                    +- Filter ((((year(cast(gettimestamp(DATE OCC#58, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#69)) AND isnotnull(LAT#82)) AND isnotnull(LON#83))
                     :                       +- FileScan csv [DR_NO#56,Date Rptd#57,DATE OCC#58,TIME OCC#59,AREA#60,AREA NAME#61,Rpt Dist No#62,Part 1-2#63,Crm Cd#64,Crm Cd Desc#65,Mocodes#66,Vict Age#67,Vict Sex#68,Vict Descent#69,Premis Cd#70,Premis Desc#71,Weapon Used Cd#72,Weapon Desc#73,Status#74,Status Desc#75,Crm Cd 1#76,Crm Cd 2#77,Crm Cd 3#78,Crm Cd 4#79,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#58, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/crime_data..., PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:string,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA:int,AREA NAME:string,Rpt D...
                     +- Exchange hashpartitioning(knownfloatingpointnormalized(normalizenanandzero(LAT#118)), knownfloatingpointnormalized(normalizenanandzero(LON#119)), 200), ENSURE_REQUIREMENTS, [plan_id=1314]
                        +- Project [LAT#118, LON#119]
                           +- Filter (ZIPcode#688 IN (90272,90077,91210) OR ZIPcode#688 IN (90021,91046,90058))
                              +- HashAggregate(keys=[LAT#118, LON#119], functions=[first(ZIPcode#120, false)])
                                 +- Exchange hashpartitioning(LAT#118, LON#119, 200), ENSURE_REQUIREMENTS, [plan_id=1307]
                                    +- HashAggregate(keys=[knownfloatingpointnormalized(normalizenanandzero(LAT#118)) AS LAT#118, knownfloatingpointnormalized(normalizenanandzero(LON#119)) AS LON#119], functions=[partial_first(ZIPcode#120, false)])
                                       +- Filter (isnotnull(LAT#118) AND isnotnull(LON#119))
                                          +- FileScan csv [LAT#118,LON#119,ZIPcode#120] Batched: false, DataFilters: [isnotnull(LAT#118), isnotnull(LON#119)], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/revgecodin..., PartitionFilters: [], PushedFilters: [IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<LAT:double,LON:double,ZIPcode:int>


+--------------------+-----+
|        Vict Descent|count|
+--------------------+-----+
|Hispanic/Latin/Me...| 1053|
|               White|  610|
|               Black|  349|
|               Other|  272|
|             Unknown|   71|
|         Other Asian|   46|
|              Korean|    4|
|American Indian/A...|    1|
|             Chinese|    1|
+--------------------+-----+

Executing query with shuffle_replicate_nl join strategy
== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- Sort [count#846L DESC NULLS LAST], true, 0
   +- Exchange rangepartitioning(count#846L DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=1928]
      +- HashAggregate(keys=[Vict Descent#262], functions=[count(1)])
         +- Exchange hashpartitioning(Vict Descent#262, 200), ENSURE_REQUIREMENTS, [plan_id=1925]
            +- HashAggregate(keys=[Vict Descent#262], functions=[partial_count(1)])
               +- Project [Vict Descent#262]
                  +- CartesianProduct ((knownfloatingpointnormalized(normalizenanandzero(LAT#26)) = knownfloatingpointnormalized(normalizenanandzero(LAT#118))) AND (knownfloatingpointnormalized(normalizenanandzero(LON#27)) = knownfloatingpointnormalized(normalizenanandzero(LON#119))))
                     :- Project [pythonUDF0#851 AS Vict Descent#262, LAT#26, LON#27]
                     :  +- BatchEvalPython [map_descent(Vict Descent#13)#261], [pythonUDF0#851]
                     :     +- HashAggregate(keys=[Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 4 more fields], functions=[])
                     :        +- Exchange hashpartitioning(Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 5 more fields), ENSURE_REQUIREMENTS, [plan_id=1913]
                     :           +- HashAggregate(keys=[Premis Cd#14, TIME OCC#3, Crm Cd 1#20, Part 1-2#7, AREA#4, DR_NO#0, DATE OCC#2, Crm Cd 4#23, Weapon Desc#17, Vict Descent#13, Status Desc#19, Premis Desc#15, Vict Age#11, Rpt Dist No#6, Date Rptd#1, Mocodes#10, LOCATION#24, Crm Cd 3#22, Vict Sex#12, Cross Street#25, knownfloatingpointnormalized(normalizenanandzero(LON#27)) AS LON#27, Crm Cd#8, AREA NAME#5, Crm Cd Desc#9, ... 4 more fields], functions=[])
                     :              +- Union
                     :                 :- Filter ((((year(cast(gettimestamp(DATE OCC#2, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#13)) AND isnotnull(LAT#26)) AND isnotnull(LON#27))
                     :                 :  +- FileScan csv [DR_NO#0,Date Rptd#1,DATE OCC#2,TIME OCC#3,AREA#4,AREA NAME#5,Rpt Dist No#6,Part 1-2#7,Crm Cd#8,Crm Cd Desc#9,Mocodes#10,Vict Age#11,Vict Sex#12,Vict Descent#13,Premis Cd#14,Premis Desc#15,Weapon Used Cd#16,Weapon Desc#17,Status#18,Status Desc#19,Crm Cd 1#20,Crm Cd 2#21,Crm Cd 3#22,Crm Cd 4#23,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#2, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), f..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/crime_data..., PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:string,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA:int,AREA NAME:string,Rpt D...
                     :                 +- Filter ((((year(cast(gettimestamp(DATE OCC#58, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), false) as date)) = 2015) AND isnotnull(Vict Descent#69)) AND isnotnull(LAT#82)) AND isnotnull(LON#83))
                     :                    +- FileScan csv [DR_NO#56,Date Rptd#57,DATE OCC#58,TIME OCC#59,AREA#60,AREA NAME#61,Rpt Dist No#62,Part 1-2#63,Crm Cd#64,Crm Cd Desc#65,Mocodes#66,Vict Age#67,Vict Sex#68,Vict Descent#69,Premis Cd#70,Premis Desc#71,Weapon Used Cd#72,Weapon Desc#73,Status#74,Status Desc#75,Crm Cd 1#76,Crm Cd 2#77,Crm Cd 3#78,Crm Cd 4#79,... 4 more fields] Batched: false, DataFilters: [(year(cast(gettimestamp(DATE OCC#58, MM/dd/yyyy hh:mm:ss a, TimestampType, Some(Europe/Athens), ..., Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/crime_data..., PartitionFilters: [], PushedFilters: [IsNotNull(Vict Descent), IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<DR_NO:string,Date Rptd:string,DATE OCC:string,TIME OCC:int,AREA:int,AREA NAME:string,Rpt D...
                     +- Project [LAT#118, LON#119]
                        +- Filter (ZIPcode#850 IN (90272,90077,91210) OR ZIPcode#850 IN (90021,91046,90058))
                           +- HashAggregate(keys=[LAT#118, LON#119], functions=[first(ZIPcode#120, false)])
                              +- Exchange hashpartitioning(LAT#118, LON#119, 200), ENSURE_REQUIREMENTS, [plan_id=1917]
                                 +- HashAggregate(keys=[knownfloatingpointnormalized(normalizenanandzero(LAT#118)) AS LAT#118, knownfloatingpointnormalized(normalizenanandzero(LON#119)) AS LON#119], functions=[partial_first(ZIPcode#120, false)])
                                    +- Filter (isnotnull(LAT#118) AND isnotnull(LON#119))
                                       +- FileScan csv [LAT#118,LON#119,ZIPcode#120] Batched: false, DataFilters: [isnotnull(LAT#118), isnotnull(LON#119)], Format: CSV, Location: InMemoryFileIndex(1 paths)[hdfs://okeanos-master:54310/user/ubuntu/ta/advanced-db/data/revgecodin..., PartitionFilters: [], PushedFilters: [IsNotNull(LAT), IsNotNull(LON)], ReadSchema: struct<LAT:double,LON:double,ZIPcode:int>


+--------------------+-----+
|        Vict Descent|count|
+--------------------+-----+
|Hispanic/Latin/Me...| 1053|
|               White|  610|
|               Black|  349|
|               Other|  272|
|             Unknown|   71|
|         Other Asian|   46|
|              Korean|    4|
|             Chinese|    1|
|American Indian/A...|    1|
+--------------------+-----+

